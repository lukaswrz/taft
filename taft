#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

progname=$0

error() {
    for line in "$@"; do
        printf '%s\n' "$progname: $line" 1>&2
    done

    exit 1
}

args=$(getopt --options p:P:vc: --longoptions=port:,path:,verbose,compress: --name "$progname" -- "$@")

eval set -- "$args"

port=1337
path=.
tarflags=()
ncflags=()
verbose=false
compress=none
while true; do
    case $1 in
    (-p | --port)
        port=$2
        shift 2
        ;;
    (-P | --path)
        path=$2
        shift 2
        ;;
    (-v | --verbose)
        verbose=true
        shift
        ;;
    (-c | --compress)
        compress=$2
        shift 2
        ;;
    (--)
        shift
        break
        ;;
    esac
done

if "$verbose"; then
    tarflags+=(--verbose --verbose)
    ncflags+=(-v)
fi

case $compress in
    (none)
        ;;
    (xz)
        tarflags+=(--xz)
        ;;
    (zstd)
        tarflags+=(--zstd)
        ;;
    (*)
        error 'invalid compression algorithm'
        ;;
esac

if (( $# == 0 )); then
    error 'a subcommand is required'
fi

subcommand=$1

case $subcommand in
    (s | send)
        shift

        if (( $# < 1 )); then
            error 'the destination address is required'
        fi

        if (( $# > 1 )); then
            error 'too many arguments'
        fi

        dest=$1

        tar --verbose --create "${tarflags[@]}" -- "$path" | nc -q 1 "${ncflags[@]}" -- "$dest" "$port"
        ;;
    (r | recv | receive)
        shift

        if (( $# > 0 )); then
            error 'too many arguments'
        fi

        nc -q 1 -l -p "$port" "${ncflags[@]}" | tar --verbose --extract "${tarflags[@]}"
        ;;
    (*)
        error 'invalid subcommand'
        ;;
esac
